#!/bin/sh

BIN="`dirname $0`"

# Instance Settings
AWKPATH=""
AWKBOT_HOME="`dirname $BIN`"
LOGDIR="$AWKBOT_HOME/logs"

# Bootstrap Settings
command="awk -f $AWKBOT_HOME/src/loader.awk -v program=kernel.awk awkbot.awk"
name=`basename $0`

if [ "" = "$AWKPATH" ]
then
    if [ -d "/usr/share/awk" ]
    then AWKPATH="/usr/share/awk"
    fi
fi

export AWKPATH="$AWKBOT_HOME/src:$AWKPATH"

# Daemon Management
pidfile="$AWKBOT_HOME/run/$name.pid"

if [ -e $pidfile ]
then pid=`cat $pidfile`
else pid=0
fi

case $1 in 
    'debug')
        echo AWKPATH="$AWKPATH" $command
    ;;

    'start')
        if [ $pid -eq 0 ]
        then $command &
             echo $! > $pidfile
        else echo "It appears $name is already running (pid $pid)"
             echo "Please run \"$0 cleanup\" if this is not true"
        fi
    ;;

    'run')
        $command
    ;;

    'stop')
        if [ $pid -eq 0 ]
        then echo "It doesn't appear that $name is running"
        else echo "$name is shutting down, this may take a while."
             echo "if $name's shutdown process is too slow, run $0 $1 again"
             echo "to stop the process forcefully, but without proper cleanup"

             if kill -0 $pid 2> "$LOGDIR/stderr.log"
             then kill $pid 

                 echo -n "Waiting for process to terminate..."
             
                 # Wait for the process to shut down by testing if it's
                 # reachable once a second.  This is in lieu of using something
                 # like waitpid, since the daemon won't be one of our child
                 # processes.
                 while kill -0 $pid 2> "$LOGDIR/stderr.log"
                 do echo -n "."
                    sleep 1
                 done

                 rm $pidfile
                 echo
            else echo "It appears $name has crashed, doing cleaup instead"
                 $0 cleanup
            fi

        fi
    ;;

    'cleanup')
        if [ -e $pidfile ]
        then rm $pidfile
        fi
    ;;

    'reload')
        echo "Attempting to reload $name"
        if kill -0 $pid 2> "$LOGDIR/stderr.log"
        then kill -HUP $pid 
             echo "Forcing reload of $name, this may take some time"
        else echo "It appears that $name isn't running"
        fi
    ;;

    *)
        echo "Usage: $0 [ start | stop | cleanup | reload ]"
        echo "  start   - Start the $name daemon"
        echo "  stop    - Stop the $name daemon"
        echo "  cleanup - Cleanup a after a dead $name daemon"
        echo "  reload  - Perform a full reload of $name"
    ;;
esac
